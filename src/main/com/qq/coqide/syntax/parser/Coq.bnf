
{
  parserClass="com.qq.coqide.syntax.parser.CoqParser"
  stubParserClass="com.qq.coqide.syntax.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Coq"
  psiImplClassSuffix="Impl"
  psiPackage="com.qq.coqide.syntax.parser.psi"
  psiImplPackage="com.qq.coqide.syntax.parser.psi"

  elementTypeHolderClass="com.qq.coqide.syntax.parser.CoqTokenTypes"
  elementTypeClass="com.qq.coqide.lexer.CoqElementType"
  tokenTypeClass="com.qq.coqide.lexer.CoqTokenType"

  tokens = [
      COLON_EQUAL=":="
      DOT="."
      ADMITTED="Admitted"
      AXIOM="Axiom"
      COFIXPOINT="CoFixpoint"
      COINDUCTIVE="CoInductive"
      CONJECTURE="Conjecture"
      COROLLARY="Corollary"
      DEFINED="Defined"
      DEFINITION="Definition"
      EXAMPLE="Example"
      FACT="Fact"
      FIXPOINT="Fixpoint"
      HYPOTHESES="Hypotheses"
      HYPOTHESIS="Hypothesis"
      INDUCTIVE="Inductive"
      LEMMA="Lemma"
      PARAMETER="Parameter"
      PARAMETERS="Parameters"
      PROOF="Proof"
      PROPOSITION="Proposition"
      QED="Qed"
      REMARK="Remark"
      THEOREM="Theorem"
      VARIABLE="Variable"
      VARIABLES="Variables"
      UNDERSCORE="_"
      AS="as"
      COFIX="cofix"
      ELSE="else"
      END="end"
      FIX="fix"
      FOR="for"
      FORALL="forall"
      FUN="fun"
      IF="if"
      IN="in"
      LET="let"
      MATCH="match"
      PROP="Prop"
      RETURN="return"
      SET="Set"
      THEN="then"
      TYPE="Type"
      WITH="with"
      PERCENT="%"
      LEFT_PAREN="("
      RIGHT_PAREN=")"
      COMMA=","
      RIGHT_SIMPLE_ARROW="->"
      DOT="."
      COLON=":"
      COLON_EQUAL=":="
      LESS_COLON="<:"
      RIGHT_DOUBLE_ARROW="=>"
      AT_SIGN="@"
      LEFT_BRACE="{"
      PIPE="|"
      RIGHT_BRACE="}"
      END_LINE="\n"
      IDENT="regexp:[a-zA-Z_][a-zA-Z0-9_']*"
      INTEGER="regexp:-?[0-9]+"
      COMMENT="regexp:\(\*.*\*\)"
    ]
}

coqFile ::= ( vernacular_sentence | COMMENT ) *

private vernacular_sentence ::= sentence DOT {pin=1}


/* VERNACULAR COMMANDS */

sentence ::=
      assumption
    | definition_sentence
    | inductive_sentence
    | fixpoint_sentence
    | assertion proof_sentence

assumption ::= assumption_keyword assums

assumption_keyword ::=
      AXIOM
    | CONJECTURE
    | PARAMETER
    | PARAMETERS
    | VARIABLE
    | VARIABLES
    | HYPOTHESIS
    | HYPOTHESES

assums ::=
      assum
    | paren_assums paren_assums *

private assum ::= IDENT (IDENT) * COLON term

private paren_assums ::= LEFT_PAREN assum RIGHT_PAREN

definition_sentence ::=
      DEFINITION IDENT binders? [ COLON term ] COLON_EQUAL term
    | LET IDENT binders? [ COLON term ] COLON_EQUAL term

inductive_sentence ::=
      INDUCTIVE ind_body (WITH ind_body) *
    | COINDUCTIVE ind_body (WITH ind_body) *

ind_body ::= IDENT binders? COLON term COLON_EQUAL [ ind_branches ]

private ind_branches ::= PIPE? IDENT binders? [ COLON term ] (PIPE IDENT binders? [ COLON term ]) *

fixpoint_sentence ::=
      FIXPOINT fix_body (WITH fix_body) *
    | COFIXPOINT fix_body (WITH fix_body) *

assertion ::= assertion_keyword IDENT binders? COLON term

assertion_keyword ::=
      THEOREM
    | LEMMA
    | REMARK
    | FACT
    | COROLLARY
    | PROPOSITION
    | DEFINITION
    | EXAMPLE

proof_sentence ::=
      PROOF DOT QED DOT
    | PROOF DOT DEFINED DOT
    | PROOF DOT ADMITTED DOT


/* GALLINA terms */

term ::=
      FORALL binders COMMA term repetition?
    | FUN binders RIGHT_DOUBLE_ARROW term repetition?
    | FIX fix_bodies repetition?
    | COFIX cofix_bodies repetition?
    | LET IDENT binders? [ COLON term ] COLON_EQUAL term IN term repetition?
    | LET FIX fix_body IN term repetition?
    | LET COFIX fix_body IN term repetition?
    | LET LEFT_PAREN [ name_term (COMMA name_term) * ] RIGHT_PAREN dep_ret_type? COLON_EQUAL term IN term repetition?
    | IF term dep_ret_type? THEN term ELSE term repetition?
    | AT_SIGN qualid term * repetition?
    | MATCH [ match_item (COMMA match_item) * ] return_type? WITH [ PIPE? equation (PIPE equation) * ] END repetition?
    | qualid repetition?
    | sort repetition?
    | INTEGER repetition?
    | UNDERSCORE repetition?
    | LEFT_PAREN term RIGHT_PAREN repetition?

repetition ::=
      COLON term (COLON term) *
    | LESS_COLON term (LESS_COLON term) *
    | RIGHT_SIMPLE_ARROW term (RIGHT_SIMPLE_ARROW term) *
    | arg arg *
    | PERCENT IDENT (PERCENT IDENT) *

arg ::=
      term
    | LEFT_PAREN IDENT COLON_EQUAL term RIGHT_PAREN

binders ::= binder binder *

binder ::=
      name_term
    | LEFT_PAREN name_term name_term * COLON term RIGHT_PAREN
    | LEFT_PAREN name_term [ COLON term ] COLON_EQUAL term RIGHT_PAREN

name_term ::=
      IDENT
    | UNDERSCORE

qualid ::= IDENT (access_ident) *

access_ident ::= DOT IDENT

sort ::=
      PROP
    | SET
    | TYPE

fix_bodies ::=
      fix_body
    | fix_body (WITH fix_body) * FOR IDENT

cofix_bodies ::=
      cofix_body
    | cofix_body (WITH cofix_body) * FOR IDENT

fix_body ::= IDENT binders annotation? [ COLON term ] COLON_EQUAL term

cofix_body ::= IDENT binders? [ COLON term ] COLON_EQUAL term

annotation ::= LEFT_BRACE STRUCT IDENT RIGHT_BRACE

match_item ::= term [ AS name_term ] [ IN term ]

dep_ret_type ::= [ AS name_term ] return_type

return_type ::= RETURN term

equation ::= mult_pattern (PIPE mult_pattern) * RIGHT_DOUBLE_ARROW term

mult_pattern ::= pattern (COMMA pattern) *

pattern ::=
      qualid pattern pattern * pattern_ending?
    | qualid pattern_ending?
    | UNDERSCORE pattern_ending?
    | INTEGER pattern_ending?
    | LEFT_PAREN or_pattern (COMMA or_pattern) * RIGHT_PAREN pattern_ending?

pattern_ending ::=
      AS IDENT (AS IDENT) *
    | PERCENT IDENT (PERCENT IDENT) *

or_pattern ::= pattern (PIPE pattern) *
