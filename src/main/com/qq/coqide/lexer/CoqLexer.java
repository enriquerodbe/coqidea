/* The following code was generated by JFlex 1.4.3 on 8/29/13 9:48 AM */

package com.qq.coqide.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.qq.coqide.lexer.CoqTokenTypes.*;
import static com.intellij.psi.TokenType.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/29/13 9:48 AM from the specification file
 * <tt>/home/enrique/IdeaProjects/coqidea/src/main/com/qq/coqide/lexer/Coq.flex</tt>
 */
class CoqLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\65\25\0\1\1\1\0\1\64\4\0\1\3\1\4"+
    "\1\6\1\5\2\0\1\63\1\61\1\0\2\7\1\55\7\7\1\60"+
    "\2\0\1\62\3\0\1\10\1\2\1\20\1\35\1\37\1\21\1\2"+
    "\1\40\1\24\2\2\1\43\3\2\1\44\1\45\1\46\1\50\1\51"+
    "\1\2\1\52\4\2\4\0\1\54\1\0\1\33\1\53\1\26\1\11"+
    "\1\15\1\36\1\56\1\41\1\13\1\30\1\47\1\32\1\12\1\23"+
    "\1\17\1\22\1\2\1\31\1\42\1\14\1\25\1\27\1\57\1\16"+
    "\1\34\1\2\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\30\3\1\5"+
    "\1\3\1\6\1\7\2\1\1\0\4\3\1\10\1\11"+
    "\7\3\1\12\5\3\1\13\1\14\21\3\1\15\1\0"+
    "\1\16\2\0\2\3\1\17\3\3\1\20\13\3\1\21"+
    "\1\3\1\22\1\23\1\24\3\3\1\25\2\3\1\26"+
    "\1\3\1\27\5\3\1\0\1\30\3\3\1\31\1\3"+
    "\1\32\5\3\1\33\12\3\1\34\2\3\1\35\2\3"+
    "\1\36\2\3\1\37\1\40\7\3\1\41\1\42\5\3"+
    "\1\43\1\44\5\3\1\45\1\3\1\46\6\3\1\47"+
    "\2\3\1\50\4\3\1\51\3\3\1\52\7\3\1\53"+
    "\1\54\3\3\1\55\1\3\1\56\4\3\1\57\5\3"+
    "\1\60\3\3\1\61\1\62\4\3\1\63\1\64\1\65"+
    "\1\66\1\3\1\67\1\70\1\71\1\3\1\72\1\73"+
    "\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\242\0\u0654"+
    "\0\u068a\0\66\0\u010e\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\242\0\242\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\242\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\242\0\242\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\66\0\u06c0\0\u06c0\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\242\0\u0efa\0\u0f30\0\u0f66\0\242\0\u0f9c"+
    "\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c"+
    "\0\u1182\0\u11b8\0\242\0\u11ee\0\242\0\u1224\0\242\0\u125a"+
    "\0\u1290\0\u12c6\0\242\0\u12fc\0\u1332\0\242\0\u1368\0\242"+
    "\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\66\0\u14e2"+
    "\0\u1518\0\u154e\0\242\0\u1584\0\242\0\u15ba\0\u15f0\0\u1626"+
    "\0\u165c\0\u1692\0\242\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950"+
    "\0\242\0\u1986\0\u19bc\0\242\0\u19f2\0\u1a28\0\242\0\242"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\242"+
    "\0\242\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\242\0\242"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\242\0\u1df4\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\242\0\u1fa4"+
    "\0\u1fda\0\242\0\u2010\0\u2046\0\u207c\0\u20b2\0\242\0\u20e8"+
    "\0\u211e\0\u2154\0\242\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262"+
    "\0\u2298\0\u22ce\0\242\0\242\0\u2304\0\u233a\0\u2370\0\242"+
    "\0\u23a6\0\242\0\u23dc\0\u2412\0\u2448\0\u247e\0\242\0\u24b4"+
    "\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664"+
    "\0\242\0\242\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\242"+
    "\0\242\0\242\0\u27a8\0\242\0\242\0\242\0\u27de\0\242"+
    "\0\242\0\242";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\2\2\1\6\1\7"+
    "\1\4\1\10\1\11\1\12\1\13\2\4\1\14\1\15"+
    "\2\4\1\16\1\17\1\20\2\4\1\21\1\22\1\23"+
    "\1\4\1\24\1\25\1\26\1\27\2\4\1\30\1\31"+
    "\1\32\1\33\1\4\1\34\1\35\1\36\1\4\1\37"+
    "\1\6\1\4\1\40\1\41\1\42\1\2\1\43\1\44"+
    "\1\3\67\0\1\3\63\0\1\3\2\0\2\4\3\0"+
    "\51\4\13\0\1\45\67\0\1\6\45\0\1\6\12\0"+
    "\2\4\3\0\2\4\1\46\4\4\1\47\41\4\10\0"+
    "\2\4\3\0\10\4\1\50\13\4\1\51\24\4\10\0"+
    "\2\4\3\0\14\4\1\52\12\4\1\53\21\4\10\0"+
    "\2\4\3\0\32\4\1\54\16\4\10\0\2\4\3\0"+
    "\7\4\1\55\4\4\1\56\6\4\1\57\25\4\10\0"+
    "\2\4\3\0\10\4\1\60\40\4\10\0\2\4\3\0"+
    "\4\4\1\61\17\4\1\62\24\4\10\0\2\4\3\0"+
    "\12\4\1\63\1\4\1\64\34\4\10\0\2\4\3\0"+
    "\33\4\1\65\15\4\10\0\2\4\3\0\10\4\1\66"+
    "\40\4\10\0\2\4\3\0\6\4\1\67\42\4\10\0"+
    "\2\4\3\0\6\4\1\70\42\4\10\0\2\4\3\0"+
    "\5\4\1\71\25\4\1\72\15\4\10\0\2\4\3\0"+
    "\6\4\1\73\42\4\10\0\2\4\3\0\4\4\1\74"+
    "\3\4\1\75\5\4\1\76\32\4\10\0\2\4\3\0"+
    "\7\4\1\77\41\4\10\0\2\4\3\0\25\4\1\100"+
    "\23\4\10\0\2\4\3\0\6\4\1\101\42\4\10\0"+
    "\2\4\3\0\22\4\1\102\1\4\1\103\24\4\10\0"+
    "\2\4\3\0\6\4\1\104\42\4\10\0\2\4\3\0"+
    "\6\4\1\105\42\4\10\0\2\4\3\0\6\4\1\106"+
    "\42\4\10\0\2\4\3\0\25\4\1\107\4\4\1\110"+
    "\16\4\10\0\2\4\3\0\24\4\1\111\24\4\10\0"+
    "\2\4\3\0\4\4\1\112\25\4\1\113\16\4\70\0"+
    "\1\114\3\0\64\115\1\116\1\0\5\117\1\120\60\117"+
    "\2\0\2\4\3\0\3\4\1\121\45\4\10\0\2\4"+
    "\3\0\4\4\1\122\44\4\10\0\2\4\3\0\2\4"+
    "\1\123\46\4\10\0\2\4\3\0\5\4\1\124\43\4"+
    "\10\0\2\4\3\0\6\4\1\125\42\4\10\0\2\4"+
    "\3\0\4\4\1\126\44\4\10\0\2\4\3\0\2\4"+
    "\1\127\46\4\10\0\2\4\3\0\33\4\1\130\15\4"+
    "\10\0\2\4\3\0\12\4\1\131\1\4\1\132\1\133"+
    "\4\4\1\134\26\4\10\0\2\4\3\0\7\4\1\135"+
    "\41\4\10\0\2\4\3\0\17\4\1\136\31\4\10\0"+
    "\2\4\3\0\2\4\1\137\46\4\10\0\2\4\3\0"+
    "\4\4\1\140\44\4\10\0\2\4\3\0\27\4\1\141"+
    "\21\4\10\0\2\4\3\0\5\4\1\142\43\4\10\0"+
    "\2\4\3\0\5\4\1\143\43\4\10\0\2\4\3\0"+
    "\27\4\1\144\21\4\10\0\2\4\3\0\7\4\1\145"+
    "\41\4\10\0\2\4\3\0\22\4\1\146\26\4\10\0"+
    "\2\4\3\0\14\4\1\147\34\4\10\0\2\4\3\0"+
    "\24\4\1\150\24\4\10\0\2\4\3\0\13\4\1\151"+
    "\35\4\10\0\2\4\3\0\3\4\1\152\1\4\1\153"+
    "\43\4\10\0\2\4\3\0\10\4\1\154\40\4\10\0"+
    "\2\4\3\0\22\4\1\155\26\4\10\0\2\4\3\0"+
    "\2\4\1\156\46\4\10\0\2\4\3\0\3\4\1\157"+
    "\45\4\10\0\2\4\3\0\5\4\1\160\43\4\10\0"+
    "\2\4\3\0\13\4\1\161\35\4\10\0\2\4\3\0"+
    "\6\4\1\162\42\4\10\0\2\4\3\0\22\4\1\163"+
    "\26\4\10\0\2\4\3\0\5\4\1\164\43\4\10\0"+
    "\2\4\3\0\6\4\1\165\42\4\6\0\5\117\1\166"+
    "\60\117\5\0\1\120\1\167\61\0\2\4\3\0\4\4"+
    "\1\170\44\4\10\0\2\4\3\0\10\4\1\171\40\4"+
    "\10\0\2\4\3\0\17\4\1\172\31\4\10\0\2\4"+
    "\3\0\14\4\1\173\34\4\10\0\2\4\3\0\33\4"+
    "\1\174\15\4\10\0\2\4\3\0\6\4\1\175\42\4"+
    "\10\0\2\4\3\0\4\4\1\176\44\4\10\0\2\4"+
    "\3\0\21\4\1\177\27\4\10\0\2\4\3\0\14\4"+
    "\1\200\34\4\10\0\2\4\3\0\10\4\1\201\40\4"+
    "\10\0\2\4\3\0\13\4\1\202\35\4\10\0\2\4"+
    "\3\0\5\4\1\203\43\4\10\0\2\4\3\0\16\4"+
    "\1\204\32\4\10\0\2\4\3\0\14\4\1\205\34\4"+
    "\10\0\2\4\3\0\4\4\1\206\44\4\10\0\2\4"+
    "\3\0\16\4\1\207\32\4\10\0\2\4\3\0\4\4"+
    "\1\210\44\4\10\0\2\4\3\0\24\4\1\211\24\4"+
    "\10\0\2\4\3\0\3\4\1\212\45\4\10\0\2\4"+
    "\3\0\10\4\1\213\40\4\10\0\2\4\3\0\3\4"+
    "\1\214\45\4\10\0\2\4\3\0\10\4\1\215\2\4"+
    "\1\216\35\4\10\0\2\4\3\0\24\4\1\217\24\4"+
    "\10\0\2\4\3\0\24\4\1\220\24\4\10\0\2\4"+
    "\3\0\6\4\1\221\42\4\10\0\2\4\3\0\10\4"+
    "\1\222\40\4\10\0\2\4\3\0\4\4\1\223\44\4"+
    "\10\0\2\4\3\0\32\4\1\224\16\4\10\0\2\4"+
    "\3\0\22\4\1\225\26\4\6\0\5\117\1\166\1\167"+
    "\57\117\2\0\2\4\3\0\5\4\1\226\43\4\10\0"+
    "\2\4\3\0\3\4\1\227\45\4\10\0\2\4\3\0"+
    "\32\4\1\230\16\4\10\0\2\4\3\0\5\4\1\231"+
    "\43\4\10\0\2\4\3\0\7\4\1\232\41\4\10\0"+
    "\2\4\3\0\6\4\1\233\42\4\10\0\2\4\3\0"+
    "\2\4\1\234\46\4\10\0\2\4\3\0\23\4\1\235"+
    "\25\4\10\0\2\4\3\0\10\4\1\236\40\4\10\0"+
    "\2\4\3\0\17\4\1\237\31\4\10\0\2\4\3\0"+
    "\47\4\1\240\1\4\10\0\2\4\3\0\7\4\1\241"+
    "\41\4\10\0\2\4\3\0\22\4\1\242\26\4\10\0"+
    "\2\4\3\0\14\4\1\243\34\4\10\0\2\4\3\0"+
    "\23\4\1\244\25\4\10\0\2\4\3\0\13\4\1\245"+
    "\35\4\10\0\2\4\3\0\5\4\1\246\43\4\10\0"+
    "\2\4\3\0\24\4\1\247\24\4\10\0\2\4\3\0"+
    "\27\4\1\250\21\4\10\0\2\4\3\0\10\4\1\251"+
    "\40\4\10\0\2\4\3\0\3\4\1\252\45\4\10\0"+
    "\2\4\3\0\22\4\1\253\26\4\10\0\2\4\3\0"+
    "\22\4\1\254\26\4\10\0\2\4\3\0\24\4\1\255"+
    "\24\4\10\0\2\4\3\0\6\4\1\256\42\4\10\0"+
    "\2\4\3\0\5\4\1\257\43\4\10\0\2\4\3\0"+
    "\33\4\1\260\15\4\10\0\2\4\3\0\13\4\1\261"+
    "\35\4\10\0\2\4\3\0\17\4\1\262\31\4\10\0"+
    "\2\4\3\0\16\4\1\263\32\4\10\0\2\4\3\0"+
    "\23\4\1\264\25\4\10\0\2\4\3\0\4\4\1\265"+
    "\44\4\10\0\2\4\3\0\5\4\1\266\43\4\10\0"+
    "\2\4\3\0\14\4\1\267\34\4\10\0\2\4\3\0"+
    "\4\4\1\270\1\4\1\271\42\4\10\0\2\4\3\0"+
    "\23\4\1\272\25\4\10\0\2\4\3\0\23\4\1\273"+
    "\25\4\10\0\2\4\3\0\32\4\1\274\16\4\10\0"+
    "\2\4\3\0\33\4\1\275\15\4\10\0\2\4\3\0"+
    "\6\4\1\276\42\4\10\0\2\4\3\0\40\4\1\277"+
    "\10\4\10\0\2\4\3\0\6\4\1\300\42\4\10\0"+
    "\2\4\3\0\44\4\1\301\4\4\10\0\2\4\3\0"+
    "\6\4\1\302\42\4\10\0\2\4\3\0\46\4\1\303"+
    "\2\4\10\0\2\4\3\0\10\4\1\304\40\4\10\0"+
    "\2\4\3\0\5\4\1\305\43\4\10\0\2\4\3\0"+
    "\17\4\1\306\31\4\10\0\2\4\3\0\24\4\1\307"+
    "\24\4\10\0\2\4\3\0\14\4\1\310\34\4\10\0"+
    "\2\4\3\0\4\4\1\311\44\4\10\0\2\4\3\0"+
    "\5\4\1\312\43\4\10\0\2\4\3\0\2\4\1\313"+
    "\46\4\10\0\2\4\3\0\6\4\1\314\42\4\10\0"+
    "\2\4\3\0\6\4\1\315\42\4\10\0\2\4\3\0"+
    "\4\4\1\316\44\4\10\0\2\4\3\0\5\4\1\317"+
    "\43\4\10\0\2\4\3\0\3\4\1\320\45\4\10\0"+
    "\2\4\3\0\23\4\1\321\25\4\10\0\2\4\3\0"+
    "\2\4\1\322\46\4\10\0\2\4\3\0\4\4\1\323"+
    "\44\4\10\0\2\4\3\0\16\4\1\324\32\4\10\0"+
    "\2\4\3\0\5\4\1\325\43\4\10\0\2\4\3\0"+
    "\22\4\1\326\26\4\10\0\2\4\3\0\5\4\1\327"+
    "\43\4\10\0\2\4\3\0\20\4\1\330\30\4\10\0"+
    "\2\4\3\0\4\4\1\331\44\4\10\0\2\4\3\0"+
    "\33\4\1\332\15\4\10\0\2\4\3\0\5\4\1\333"+
    "\43\4\10\0\2\4\3\0\6\4\1\334\42\4\10\0"+
    "\2\4\3\0\6\4\1\335\42\4\10\0\2\4\3\0"+
    "\14\4\1\336\34\4\10\0\2\4\3\0\22\4\1\337"+
    "\26\4\10\0\2\4\3\0\4\4\1\340\44\4\10\0"+
    "\2\4\3\0\25\4\1\341\23\4\10\0\2\4\3\0"+
    "\6\4\1\342\42\4\10\0\2\4\3\0\10\4\1\343"+
    "\40\4\10\0\2\4\3\0\4\4\1\344\1\4\1\345"+
    "\42\4\10\0\2\4\3\0\4\4\1\346\44\4\10\0"+
    "\2\4\3\0\22\4\1\347\26\4\10\0\2\4\3\0"+
    "\33\4\1\350\15\4\10\0\2\4\3\0\5\4\1\351"+
    "\43\4\10\0\2\4\3\0\6\4\1\352\42\4\10\0"+
    "\2\4\3\0\20\4\1\353\30\4\10\0\2\4\3\0"+
    "\14\4\1\354\34\4\10\0\2\4\3\0\33\4\1\355"+
    "\15\4\10\0\2\4\3\0\33\4\1\356\15\4\10\0"+
    "\2\4\3\0\10\4\1\357\40\4\10\0\2\4\3\0"+
    "\33\4\1\360\15\4\10\0\2\4\3\0\6\4\1\361"+
    "\42\4\10\0\2\4\3\0\14\4\1\362\34\4\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\1\11\2\1\1\0\46\1\1\11"+
    "\1\0\1\1\2\0\45\1\1\0\1\11\173\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  CoqLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CoqLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { return VARIABLE;
          }
        case 61: break;
        case 9: 
          { return IF;
          }
        case 62: break;
        case 53: 
          { return COFIXPOINT;
          }
        case 63: break;
        case 28: 
          { return PROP;
          }
        case 64: break;
        case 31: 
          { return AXIOM;
          }
        case 65: break;
        case 22: 
          { return QED;
          }
        case 66: break;
        case 32: 
          { return MATCH;
          }
        case 67: break;
        case 57: 
          { return HYPOTHESES;
          }
        case 68: break;
        case 16: 
          { return END;
          }
        case 69: break;
        case 4: 
          { return INTEGER;
          }
        case 70: break;
        case 36: 
          { return PROOF;
          }
        case 71: break;
        case 51: 
          { return PARAMETER;
          }
        case 72: break;
        case 55: 
          { return DEFINITION;
          }
        case 73: break;
        case 5: 
          { return UNDERSCORE;
          }
        case 74: break;
        case 59: 
          { return COINDUCTIVE;
          }
        case 75: break;
        case 15: 
          { return MOD;
          }
        case 76: break;
        case 29: 
          { return TYPE;
          }
        case 77: break;
        case 10: 
          { return IF_UPPER;
          }
        case 78: break;
        case 13: 
          { return COLON_EQ;
          }
        case 79: break;
        case 47: 
          { return FIXPOINT;
          }
        case 80: break;
        case 7: 
          { return DOT;
          }
        case 81: break;
        case 11: 
          { return AT;
          }
        case 82: break;
        case 24: 
          { return COMMENT;
          }
        case 83: break;
        case 8: 
          { return IN;
          }
        case 84: break;
        case 41: 
          { return REMARK;
          }
        case 85: break;
        case 37: 
          { return WHERE;
          }
        case 86: break;
        case 14: 
          { return STRING_LITERAL;
          }
        case 87: break;
        case 34: 
          { return COFIX;
          }
        case 88: break;
        case 58: 
          { return PARAMETERS;
          }
        case 89: break;
        case 20: 
          { return FUN;
          }
        case 90: break;
        case 30: 
          { return WITH;
          }
        case 91: break;
        case 6: 
          { return COLON;
          }
        case 92: break;
        case 49: 
          { return COROLLARY;
          }
        case 93: break;
        case 60: 
          { return PROPOSITION;
          }
        case 94: break;
        case 52: 
          { return VARIABLES;
          }
        case 95: break;
        case 42: 
          { return EXISTS2;
          }
        case 96: break;
        case 40: 
          { return FORALL;
          }
        case 97: break;
        case 18: 
          { return FIX;
          }
        case 98: break;
        case 46: 
          { return ADMITTED;
          }
        case 99: break;
        case 45: 
          { return THEOREM;
          }
        case 100: break;
        case 56: 
          { return HYPOTHESIS;
          }
        case 101: break;
        case 25: 
          { return THEN;
          }
        case 102: break;
        case 23: 
          { return SET;
          }
        case 103: break;
        case 12: 
          { return AS;
          }
        case 104: break;
        case 50: 
          { return INDUCTIVE;
          }
        case 105: break;
        case 26: 
          { return ELSE;
          }
        case 106: break;
        case 39: 
          { return RETURN;
          }
        case 107: break;
        case 35: 
          { return LEMMA;
          }
        case 108: break;
        case 54: 
          { return CONJECTURE;
          }
        case 109: break;
        case 21: 
          { return LET_UPPER;
          }
        case 110: break;
        case 17: 
          { return LET;
          }
        case 111: break;
        case 33: 
          { return USING;
          }
        case 112: break;
        case 38: 
          { return EXISTS;
          }
        case 113: break;
        case 43: 
          { return DEFINED;
          }
        case 114: break;
        case 19: 
          { return FOR;
          }
        case 115: break;
        case 3: 
          { return IDENT;
          }
        case 116: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 117: break;
        case 27: 
          { return FACT;
          }
        case 118: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 119: break;
        case 44: 
          { return EXAMPLE;
          }
        case 120: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
